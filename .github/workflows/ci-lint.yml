name: Lint Checks
on:
  workflow_call:

permissions:
  # Optional: allow write access to checks to allow the action to annotate code in the PR.
  checks: write

# run per commit ci checks against this commit
jobs:
  proto-lint:
    uses: ./.github/workflows/proto.yml
  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
      - name: Load Version
        id: load-version
        run: |
          echo "GOLANGCI_VERSION=v$(cat .golangci-version)"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ steps.load-version.outputs.GOLANGCI_VERSION }}
          args: --timeout 30m --verbose --allow-parallel-runners --max-same-issues 0 --max-issues-per-linter 0
          working-directory: ${{ github.workspace }}
        if: |
          contains(steps.changed-files.outputs.all_changed_files, '.go')
  golang-sec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Run Gosec Security Scanner
        uses: cosmos/gosec@master
        with:
          args: ./...
#  golang-test:
#    name: go test
#    runs-on: ubuntu-latest
#    if: |
#      contains(steps.changed-files.outputs.changed_files, '.go') ||
#      contains(steps.changed-files.outputs.changed_files, 'go.sum') ||
#      (
#        contains(steps.changed-files.outputs.changed_files, '.yml') ||
#        contains(steps.changed-files.outputs.changed_files, '.yaml')
#      )
#      &&
#      (
#        contains(steps.changed-files.outputs.changed_files, 'app') ||
#        contains(steps.changed-files.outputs.changed_files, 'client') ||
#        contains(steps.changed-files.outputs.changed_files, 'cmd') ||
#        contains(steps.changed-files.outputs.changed_files, 'migrate') ||
#        contains(steps.changed-files.outputs.changed_files, 'tests') ||
#        contains(steps.changed-files.outputs.changed_files, 'x')
#      )
#    env:
#      COVERAGE_DIR: out/coverage/unit/go
#      COVERAGE_PATH: out/coverage/unit/go/cover.out
#      FORMATTED_REPORT: out/coverage/unit/go/go-unit-cover.out
#      HTML_REPORT: out/coverage/unit/go/go-unit-cover.html
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Install Go
#        uses: actions/setup-go@v5
#        with:
#          go-version-file: go.mod
#          cache-dependency-path: go.sum
#      - name: Go Test
#        run: |
#          mkdir -p ${{ env.COVERAGE_DIR }}
#          readarray -t test_dirs < <(find * -name "*_test.go" -exec dirname {} \; | sort | uniq | grep -v -e '^\.$')
#          half_nproc=$(( $(nproc --all) / 2 ))
#          printf '%s\0' "${test_dirs[@]}" | xargs -0 -P $half_nproc -n 1 -I {} go test "./{}" -race
