// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kava/savings/v1beta1/store.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the savings module.
type Params struct {
	SupportedDenoms []string `protobuf:"bytes,1,rep,name=supported_denoms,json=supportedDenoms,proto3" json:"supported_denoms,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7110366fa182786, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSupportedDenoms() []string {
	if m != nil {
		return m.SupportedDenoms
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "kava.savings.v1beta1.Params")
}

func init() { proto.RegisterFile("kava/savings/v1beta1/store.proto", fileDescriptor_f7110366fa182786) }

var fileDescriptor_f7110366fa182786 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0x6f, 0x11, 0x02, 0x5e, 0xa3, 0x84, 0x14, 0x9a, 0x62, 0x0d, 0x56, 0xa6, 0xf0, 0x86,
	0x90, 0x37, 0x10, 0x3b, 0x1b, 0xb1, 0xb4, 0x09, 0xb3, 0xc9, 0xba, 0x1e, 0x66, 0x33, 0xcb, 0xcd,
	0xdc, 0xa1, 0x6f, 0xe1, 0x63, 0xf8, 0x28, 0x96, 0x29, 0x2d, 0xe3, 0xdd, 0x8b, 0x84, 0xdb, 0x3d,
	0xd2, 0xfd, 0xff, 0xc7, 0x37, 0x30, 0x7f, 0x3e, 0xfb, 0xc0, 0x06, 0x81, 0xb1, 0x29, 0x77, 0x8e,
	0xa1, 0x59, 0x18, 0x2b, 0xb8, 0x00, 0x16, 0xaa, 0x6c, 0x11, 0x2a, 0x12, 0x1a, 0x4f, 0x7a, 0xa3,
	0x18, 0x8c, 0x62, 0x30, 0xa6, 0xd7, 0x6b, 0x62, 0x4f, 0xbc, 0x8a, 0x0e, 0xa4, 0x92, 0x0e, 0xa6,
	0x13, 0x47, 0x8e, 0x12, 0xef, 0xd3, 0x40, 0x6f, 0x1c, 0x91, 0xdb, 0x5a, 0x88, 0xcd, 0xd4, 0x6f,
	0x20, 0xa5, 0xb7, 0x2c, 0xe8, 0x43, 0x12, 0x6e, 0x97, 0xf9, 0xe8, 0x19, 0x2b, 0xf4, 0x3c, 0x9e,
	0xe7, 0x97, 0x5c, 0x87, 0x40, 0x95, 0xd8, 0xcd, 0x6a, 0x63, 0x77, 0xe4, 0xf9, 0x4a, 0xcd, 0xce,
	0xee, 0xce, 0x5f, 0x2e, 0x4e, 0xfc, 0x31, 0xe2, 0x87, 0xa7, 0xc3, 0xbf, 0x56, 0x3f, 0xad, 0x56,
	0xbf, 0xad, 0x56, 0xfb, 0x56, 0xab, 0x43, 0xab, 0xd5, 0x77, 0xa7, 0xb3, 0x7d, 0xa7, 0xb3, 0xbf,
	0x4e, 0x67, 0xaf, 0x73, 0x57, 0xca, 0x7b, 0x6d, 0x8a, 0x35, 0x79, 0xe8, 0x97, 0xdc, 0x6f, 0xd1,
	0x70, 0x4c, 0xf0, 0x79, 0xda, 0x2d, 0x5f, 0xc1, 0xb2, 0x19, 0xc5, 0x47, 0x96, 0xc7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x97, 0xa3, 0xcc, 0x03, 0x14, 0x01, 0x00, 0x00,
}

func (this *Params) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Params")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Params but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Params but is not nil && this == nil")
	}
	if len(this.SupportedDenoms) != len(that1.SupportedDenoms) {
		return fmt.Errorf("SupportedDenoms this(%v) Not Equal that(%v)", len(this.SupportedDenoms), len(that1.SupportedDenoms))
	}
	for i := range this.SupportedDenoms {
		if this.SupportedDenoms[i] != that1.SupportedDenoms[i] {
			return fmt.Errorf("SupportedDenoms this[%v](%v) Not Equal that[%v](%v)", i, this.SupportedDenoms[i], i, that1.SupportedDenoms[i])
		}
	}
	return nil
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SupportedDenoms) != len(that1.SupportedDenoms) {
		return false
	}
	for i := range this.SupportedDenoms {
		if this.SupportedDenoms[i] != that1.SupportedDenoms[i] {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedDenoms) > 0 {
		for iNdEx := len(m.SupportedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedDenoms[iNdEx])
			copy(dAtA[i:], m.SupportedDenoms[iNdEx])
			i = encodeVarintStore(dAtA, i, uint64(len(m.SupportedDenoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SupportedDenoms) > 0 {
		for _, s := range m.SupportedDenoms {
			l = len(s)
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedDenoms = append(m.SupportedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
